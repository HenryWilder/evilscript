---
import CodeExample from '../components/CodeExample.astro';
import '../styles/style.scss';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Homepage | EvilScript</title>
	</head>
	<body>
		<h1>EvilScript</h1>
		<p>EvilScript is a programming language that is designed to be as evil as possible.</p>
		<p>Some examples:</p>
		<ul>
			<li>
				EvilScript is extremely verbose. It is designed to be as difficult to read as possible.
			</li>
			<li>
				There is no branching. To replicate the functionality of an if statement,
				you must perform both branches and dispose of the result of the branch you don't want.
			</li>
			<li>
				There are no comments. All text is executed.
			</li>
			<li>
				The script is executed backwards. The last line is executed first, and the first line is executed last.
			</li>
			<li>
				The script is whitespace sensitive. If you have a space in the wrong place, your script will not work.
			</li>
			<li>
				All variables are global and immutable. To change the value of a non-lambda variable, you must use a different name.
			</li>
			<li>
				Variable names cannot contain numbers. Nor can they contain the letters <c>e</c>, <c>v</c>, <c>i</c>, nor <c>l</c>.<br/>
				These letters are not reserved for the language itself, I just don't want you to use them.<br/>
				They also cannot contain underscores, hyphens, nor spaces. They can only contain letters.<br/>
				Specifically, lowercase letters. No capitals.<br/>
				The valid symbols usable in variable names are: <c>a, b, c, d, f, g, h, j, k, m, n, o, p, q, r, s, t, u, w, x, y, z</c>.
			</li>
			<li>
				There are no global functions. All functions are lambdas and must be assigned to a variable.
			</li>
			<li>
				Functions are the only exception to the "all variables are global and immutable" rule.<br/>
				Functions can be assigned to variables, and those variables can be changed.<br/>
				And they are also local.
			</li>
			<li>
				There are no for/while loops. To loop, you must use recursion.
			</li>
			<li>
				Loops can only be exited by throwing an exception.<br/>
				Your return must be contained in the exception.
			</li>
			<li>
				There are no classes. To create an object, you must use a function that returns an array.
			</li>
			<li>
				Arrays have a maximum depth of 3. You cannot have an array of arrays of arrays of arrays.
			</li>
			<li>
				Arrays have a maximum length of 10. You cannot have an array of 11 or more items.<br/>
				To have more than 10 items, you must use either an array of arrays or point to the next array as one of the elements of your array.
			</li>
			<li>
				There is no dot operator. Dots are used to denote the end of a statement.<br/>
				To use a decimal, you must use a comma.
			</li>
			<li>
				Functions cannot take multiple arguments. To pass multiple arguments, you must use an array.
			</li>
			<li>
				All variables are of type "any". There are no other types.<br/>
				However, you must still preceed your variables with a type. That type is "any".
			</li>
			<li>
				Function definition syntax is as follows:
				<CodeExample snippet="function" names={["foo", `<span class="comment">[[function definition here]]</span>`]}></CodeExample>
				Function redefinition syntax is as follows:
				<code>
					<span class="comment">new function definition</span> = <span class="var">foo</span>()
				</code>
				Function call syntax where a function has a return value is as follows:
				<CodeExample snippet="function-call" names={["foo", "arg", "result"]}></CodeExample>
				Note that these keywords WILL change with every update to the language, breaking your legacy code.
			</li>
		</ul>

		<label for="user-code"><h3>Write your EvilScript here:</h3></label>
		<textarea id="user-code" autocomplete="off" spellcheck="false"></textarea>

		<label for="highlighted-code"><h3>Syntax highlighted:</h3></label>
		<code id="highlighted-code" class="highlighted"></code>

		<div id="js-code-debug"></div>

		<button id="execute-code-button">Run</button>
		<code id="output-console" class="highlighted"></code>

		<script>
			import '../scripts/shared';
			import * as EvilScript from '../scripts/compiler';

			const testStr: string = "This is a test where 'I like apples' has the word 'apples' replaced with 'oranges'. I like apples. I like apples.";
			console.log("Modified:", testStr.replaceWithin(/I like (apples)/g, (_: string) => { return "oranges"; }));
			console.log("Original:", testStr);

			const userCode: HTMLTextAreaElement = document.getElementById('user-code')! as HTMLTextAreaElement;
			const highlightedCode: HTMLElement = document.getElementById('highlighted-code')!;
			const jsCodeDebug: HTMLElement = document.getElementById('js-code-debug')!;
			const executeCodeButton: HTMLButtonElement = document.getElementById('execute-code-button')! as HTMLButtonElement;
			const outputConsole: HTMLElement = document.getElementById('output-console')!;

			let jsCode: string = '';

			const logOutput = (output: string | Error) => {
				const line = document.createElement('div');
				if (output instanceof Error) {
					console.error(output); // Mirror to inspector console
					line.classList.add('err');
					line.innerText = `${output.name}: ${output.message}`;
				} else if (typeof output === 'string') {
					console.log(output); // Mirror to inspector console
					line.classList.add('log');
					line.innerText = output;
				}
				outputConsole.appendChild(line);
			};

			userCode.value = "Hello world";

			const sanitize = (text: string): string => {
				text = text
					.replaceAll('&', '&amp;')
					.replaceAll('<', '&lt;')
					.replaceAll('>', '&gt;')
					.replaceAll('/', '&sol;');
				return text;
			}

			const refresh = () => {
				const sanitized = sanitize(userCode.value);
				highlightedCode.innerHTML = `<pre style="margin-block:-0.5ch;">${EvilScript.highlight(sanitized)}</pre>`;
				jsCode = EvilScript.compile(sanitized);

				if (true) { // Debug
					jsCodeDebug.innerText = '// Debug mode is on.\n' + jsCode;
				}
			};

			userCode.addEventListener('input', refresh);
			refresh();

			executeCodeButton.addEventListener('click', () => {
				outputConsole.innerHTML = '';
				console.log(jsCode);
				try {
					Function(jsCode)();
				} catch (e: any) {
					if (e instanceof Error || typeof e === 'string')
						logOutput(e);
					else
						console.error(e);
				}
			});
		</script>
	</body>
</html>
